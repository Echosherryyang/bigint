--- ../jdk8/jdk/test/java/math/BigInteger/BigIntegerTest.java	2014-02-03 10:12:51.061800973 +0100
+++ src/test/java/BigIntegerTest.java	2014-02-04 21:26:18.964667025 +0100
@@ -38,0 +39,8 @@
+import java.lang.reflect.Array;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
@@ -46,2 +54,2 @@
- * Four arguments may be specified which give the number of
- * decimal digits you desire in the four batches of test numbers.
+ * Five arguments may be specified which give the number of
+ * decimal digits you desire in the five batches of test numbers.
@@ -59,4 +67,4 @@
-    // KARATSUBA_THRESHOLD        = 80  ints = 2560 bits
-    // TOOM_COOK_THRESHOLD        = 240 ints = 7680 bits
-    // KARATSUBA_SQUARE_THRESHOLD = 128 ints = 4096 bits
-    // TOOM_COOK_SQUARE_THRESHOLD = 216 ints = 6912 bits
+    // KARATSUBA_THRESHOLD        = 50  ints = 1600 bits
+    // TOOM_COOK_THRESHOLD        = 75  ints = 2400 bits
+    // KARATSUBA_SQUARE_THRESHOLD = 90  ints = 2880 bits
+    // TOOM_COOK_SQUARE_THRESHOLD = 140 ints = 4480 bits
@@ -64 +72 @@
-    // SCHOENHAGE_BASE_CONVERSION_THRESHOLD = 20 ints = 640 bits
+    // SCHOENHAGE_BASE_CONVERSION_THRESHOLD = 8 ints = 256 bits
@@ -66 +74 @@
-    // BURNIKEL_ZIEGLER_THRESHOLD = 80  ints = 2560 bits
+    // BURNIKEL_ZIEGLER_THRESHOLD = 50  ints = 1600 bits
@@ -68,6 +76,6 @@
-    static final int BITS_KARATSUBA = 2560;
-    static final int BITS_TOOM_COOK = 7680;
-    static final int BITS_KARATSUBA_SQUARE = 4096;
-    static final int BITS_TOOM_COOK_SQUARE = 6912;
-    static final int BITS_SCHOENHAGE_BASE = 640;
-    static final int BITS_BURNIKEL_ZIEGLER = 2560;
+    static final int BITS_KARATSUBA = 1600;
+    static final int BITS_TOOM_COOK = 2400;
+    static final int BITS_KARATSUBA_SQUARE = 2880;
+    static final int BITS_TOOM_COOK_SQUARE = 4480;
+    static final int BITS_SCHOENHAGE_BASE = 256;
+    static final int BITS_BURNIKEL_ZIEGLER = 1600;
@@ -77,4 +85,6 @@
-    // #bits for testing Karatsuba
-    static final int ORDER_KARATSUBA = 2760;
-    // #bits for testing Toom-Cook and Burnikel-Ziegler
-    static final int ORDER_TOOM_COOK = 8000;
+    // #bits for testing Karatsuba and Burnikel-Ziegler
+    static final int ORDER_KARATSUBA = 1800;
+    // #bits for testing Toom-Cook
+    static final int ORDER_TOOM_COOK = 3000;
+    // #bits for testing Schoenhage-Strassen and Barrett
+    static final int ORDER_SS_BARRETT = 4000000;
@@ -82 +92 @@
-    static final int ORDER_KARATSUBA_SQUARE = 4200;
+    static final int ORDER_KARATSUBA_SQUARE = 3200;
@@ -84 +94 @@
-    static final int ORDER_TOOM_COOK_SQUARE = 7000;
+    static final int ORDER_TOOM_COOK_SQUARE = 4600;
@@ -86,0 +97 @@
+    static final int REDUCED_SIZE = 10;   // numbers per batch in the Schoenhage-Strassen/Barrett range
@@ -113 +124,2 @@
-        for (int i=0; i<SIZE; i++) {
+        int iterations = order<ORDER_SS_BARRETT ? SIZE : REDUCED_SIZE;
+        for (int i=0; i<iterations; i++) {
@@ -128 +140,2 @@
-        for (int i=0; i<SIZE; i++) {
+        int iterations = order<ORDER_SS_BARRETT ? SIZE : REDUCED_SIZE;
+        for (int i=0; i<iterations; i++) {
@@ -333,0 +347,534 @@
+    public static void schoenhageStrassen(int order) throws Exception {
+        int failCount = 0;
+
+        // test edge cases by multiplying numbers of the form 2^n + {-1,0,1}
+        for (int i=0; i<10; i++) {
+            int m = 1 << (23+rnd.nextInt(3));
+            BigInteger x = ONE.shiftLeft(m);
+            BigInteger xd = BigInteger.valueOf(rnd.nextInt(3) - 1);
+
+            int n = 1 << (23+rnd.nextInt(3));
+            BigInteger y = ONE.shiftLeft(n);
+            BigInteger yd = BigInteger.valueOf(rnd.nextInt(3) - 1);
+
+            BigInteger product = x.add(xd).multiply(y.add(yd));
+            BigInteger expected = ONE.shiftLeft(m + n);
+            expected = expected.add(yd.shiftLeft(m));   // add x.multiply(yd)
+            expected = expected.add(xd.shiftLeft(n));   // add y.multiply(xd)
+            expected = expected.add(xd.multiply(yd));
+
+            if (!product.equals(expected)) {
+                failCount++;
+            }
+        }
+
+        // test edge cases by squaring numbers of the form 2^n + {-1,0,1}
+        Method squareMethod = BigInteger.class.getDeclaredMethod("square");
+        squareMethod.setAccessible(true);
+        for (int i=0; i<10; i++) {
+            int m = 1 << (23+rnd.nextInt(3));
+            BigInteger x = ONE.shiftLeft(m);
+            BigInteger xd = BigInteger.valueOf(rnd.nextInt(3) - 1);
+
+            BigInteger square = (BigInteger)squareMethod.invoke(x.add(xd));
+            BigInteger expected = ONE.shiftLeft(2 * m);
+            expected = expected.add(xd.shiftLeft(m+1));   // add 2*x.multiply(xd)
+            expected = expected.add(xd.multiply(xd));
+
+            if (!square.equals(expected)) {
+                failCount++;
+            }
+        }
+
+        // test multithreaded multiplySchoenhageStrassen()
+        Method multiplySchoenhageStrassenMethod = BigInteger.class.getDeclaredMethod("multiplySchoenhageStrassen", BigInteger.class, BigInteger.class, int.class);
+        multiplySchoenhageStrassenMethod.setAccessible(true);
+        for (int i=0; i<10; i++) {
+            BigInteger a = new BigInteger(ORDER_SS_BARRETT, rnd);
+            BigInteger b = new BigInteger(ORDER_SS_BARRETT, rnd);
+            BigInteger c1 = a.multiply(b, 2+rnd.nextInt(10));
+            BigInteger c2 = a.multiply(b);
+            if (!c1.equals(c2))
+                failCount++;
+        }
+
+        // verify that idft(dft(a)) = a
+        Class<?> mutableModFnClass = Class.forName("java.math.MutableModFn");
+        Constructor<?> mutableModFnCtor = mutableModFnClass.getDeclaredConstructor(long[].class);
+        mutableModFnCtor.setAccessible(true);
+        Field digitsField = mutableModFnClass.getDeclaredField("digits");
+        digitsField.setAccessible(true);
+        Method dftMethod = BigInteger.class.getDeclaredMethod("dft", Array.newInstance(mutableModFnClass, 0).getClass(), int.class, int.class);
+        dftMethod.setAccessible(true);
+        Method idftMethod = BigInteger.class.getDeclaredMethod("idft", Array.newInstance(mutableModFnClass, 0).getClass(), int.class, int.class);
+        idftMethod.setAccessible(true);
+        for (int k=0; k<100; k++) {
+            int m = 10 + rnd.nextInt(8);
+            int n = m/2 + 1;
+            long[][] a = createRandomDftArray(m, n);
+            long[][] aOrig = new long[a.length][];
+            for (int i=0; i<a.length; i++)
+                aOrig[i] = a[i].clone();
+            int omega = m%2==0 ? 4 : 2;
+            Object vector = Array.newInstance(mutableModFnClass, a.length);
+            for (int i=0; i<a.length; i++)
+                Array.set(vector, i, mutableModFnCtor.newInstance(a[i]));
+            dftMethod.invoke(null, vector, omega, 1);
+            idftMethod.invoke(null, vector, omega, 1);
+            for (int i=0; i<aOrig.length; i++) {
+                long[] origDigits = (long[])digitsField.get(Array.get(vector, i));
+                if (!Arrays.equals(origDigits, aOrig[i]))
+                    failCount++;
+            }
+        }
+
+        // test MutableModFn.multiply()
+        Method multiplyMethod = mutableModFnClass.getDeclaredMethod("multiply", mutableModFnClass);
+        multiplyMethod.setAccessible(true);
+        Method reduceMethod = mutableModFnClass.getDeclaredMethod("reduce");
+        reduceMethod.setAccessible(true);
+        Constructor<BigInteger> bigintCtor = BigInteger.class.getDeclaredConstructor(int.class, int[].class);
+        bigintCtor.setAccessible(true);
+        for (int i=0; i<100; i++) {
+            int n = 6 + rnd.nextInt(10);
+            long[] a = createRandomModFn(n);
+            long[] b = createRandomModFn(n);
+
+            int[] aInt = toIntArray(a);
+            BigInteger aBigInt = bigintCtor.newInstance(1, aInt);
+            int[] bInt = toIntArray(b);
+            BigInteger bBigInt = bigintCtor.newInstance(1, bInt);
+            BigInteger expected = aBigInt.multiply(bBigInt).mod(fermat(n));
+
+            Object aMutable = mutableModFnCtor.newInstance(a);
+            Object bMutable = mutableModFnCtor.newInstance(b);
+            multiplyMethod.invoke(aMutable, bMutable);
+            long[] c = (long[])digitsField.get(aMutable);
+            int[] cInt = toIntArray(c);
+            BigInteger actual = bigintCtor.newInstance(1, cInt);
+
+            if (!actual.equals(expected))
+                failCount++;
+        }
+
+        // test MutableModFn.square()
+        Method squareModFnMethod = mutableModFnClass.getDeclaredMethod("square");
+        squareModFnMethod.setAccessible(true);
+        for (int i=0; i<100; i++) {
+            int n = 6 + rnd.nextInt(10);
+            long[] a = createRandomModFn(n);
+
+            int[] aInt = toIntArray(a);
+            BigInteger aBigInt = bigintCtor.newInstance(1, aInt);
+            BigInteger expected = aBigInt.multiply(aBigInt).mod(fermat(n));
+
+            Object aMutable = mutableModFnCtor.newInstance(a);
+            squareModFnMethod.invoke(aMutable);
+            long[] c = (long[])digitsField.get(aMutable);
+            int[] cInt = toIntArray(c);
+            BigInteger actual = bigintCtor.newInstance(1, cInt);
+
+            if (!actual.equals(expected))
+                failCount++;
+        }
+
+        // test MutableModFn.add()
+        Method addMethod = mutableModFnClass.getDeclaredMethod("add", mutableModFnClass);
+        addMethod.setAccessible(true);
+        Method toIntArrayOddMethod = mutableModFnClass.getDeclaredMethod("toIntArrayOdd", long[].class);
+        toIntArrayOddMethod.setAccessible(true);
+        for (int k = 0; k<100; k++) {
+            int n = 6 + rnd.nextInt(10);
+            long[] aArr = createRandomModFn(n);
+            long[] bArr = createRandomModFn(n);
+
+            int[] aArrInt = toIntArray(aArr);
+            BigInteger a = bigintCtor.newInstance(1, aArrInt);
+            int[] bArrInt = toIntArray(bArr);
+            BigInteger b = bigintCtor.newInstance(1, bArrInt);
+            BigInteger expected = a.add(b).mod(fermat(n));
+
+            Object aMutable = mutableModFnCtor.newInstance(aArr);
+            Object bMutable = mutableModFnCtor.newInstance(bArr);
+            addMethod.invoke(aMutable, bMutable);
+            aArr = (long[])digitsField.get(aMutable);
+            aArrInt = toIntArray(aArr);
+            BigInteger actual = bigintCtor.newInstance(1, aArrInt);
+
+            if (!actual.equals(expected))
+                failCount++;
+        }
+
+        // test MutableModFn.subtract()
+        Method subtractMethod = mutableModFnClass.getDeclaredMethod("subtract", mutableModFnClass);
+        subtractMethod.setAccessible(true);
+        for (int k = 0; k<100; k++) {
+            int n = 6 + rnd.nextInt(10);
+            long[] aArr = createRandomModFn(n);
+            long[] bArr = createRandomModFn(n);
+
+            int[] aArrInt = toIntArray(aArr);
+            BigInteger a = bigintCtor.newInstance(1, aArrInt);
+            int[] bArrInt = toIntArray(bArr);
+            BigInteger b = bigintCtor.newInstance(1, bArrInt);
+            BigInteger expected = a.subtract(b).mod(fermat(n));
+
+            Object aMutable = mutableModFnCtor.newInstance(aArr);
+            Object bMutable = mutableModFnCtor.newInstance(bArr);
+            subtractMethod.invoke(aMutable, bMutable);
+            aArr = (long[])digitsField.get(aMutable);
+            aArrInt = toIntArray(aArr);
+            BigInteger actual = bigintCtor.newInstance(1, aArrInt);
+
+            if (!actual.equals(expected))
+                failCount++;
+        }
+
+        // test MutableModFn.shiftLeft() against BigInteger.shiftLeft().mod(Fn)
+        Method shiftLeftMethod = mutableModFnClass.getDeclaredMethod("shiftLeft", int.class, mutableModFnClass);
+        shiftLeftMethod.setAccessible(true);
+        for (int k = 0; k<100; k++) {
+            int n = 6 + rnd.nextInt(10);
+            long[] aArr = createRandomModFn(n);
+            long[] bArr = new long[aArr.length];
+            int shiftDistance = rnd.nextInt(1 << (n+1));
+
+            int[] aArrInt = toIntArray(aArr);
+            BigInteger a = bigintCtor.newInstance(1, aArrInt);
+            BigInteger expected = a.shiftLeft(shiftDistance).mod(fermat(n));
+
+            Object aMutable = mutableModFnCtor.newInstance(aArr);
+            Object bMutable = mutableModFnCtor.newInstance(bArr);
+            shiftLeftMethod.invoke(aMutable, shiftDistance, bMutable);
+            bArr = (long[])digitsField.get(bMutable);
+            int[] bArrInt = toIntArray(bArr);
+            BigInteger actual = bigintCtor.newInstance(1, bArrInt);
+
+            if (!actual.equals(expected))
+                failCount++;
+        }
+
+        // test MutableModFn.shiftRight() against BigInteger.multiply(2^(-shiftDistance)).mod(Fn)
+        Method shiftRightMethod = mutableModFnClass.getDeclaredMethod("shiftRight", int.class, mutableModFnClass);
+        shiftRightMethod.setAccessible(true);
+        for (int k = 0; k<100; k++) {
+            int n = 6 + rnd.nextInt(10);
+            long[] aArr = createRandomModFn(n);
+            long[] bArr = new long[aArr.length];
+            int shiftDistance = rnd.nextInt(1 << (n+1));
+
+            BigInteger Fn = fermat(n);
+            BigInteger inv2 = Fn.add(ONE).divide(TWO);   // 2^(-1) mod Fn
+            BigInteger inv = inv2.modPow(BigInteger.valueOf(shiftDistance), Fn);   // 2^(-shiftDistance) mod Fn
+            int[] aArrInt = toIntArray(aArr);
+            BigInteger a = bigintCtor.newInstance(1, aArrInt);
+            BigInteger expected = a.multiply(inv).mod(Fn);
+
+            Object aMutable = mutableModFnCtor.newInstance(aArr);
+            Object bMutable = mutableModFnCtor.newInstance(bArr);
+            shiftRightMethod.invoke(aMutable, shiftDistance, bMutable);
+            bArr = (long[])digitsField.get(bMutable);
+            int[] bArrInt = toIntArray(bArr);
+            BigInteger actual = bigintCtor.newInstance(1, bArrInt);
+
+            if (!actual.equals(expected))
+                failCount++;
+        }
+
+        // test MutableModFn.shiftLeft() and MutableModFn.shiftRight() by doing multiple shifts which should cancel each other out
+        for (int k = 0; k<100; k++) {
+            int n = 6 + rnd.nextInt(10);
+            int bitLen = (1<<n) + 1;
+            // pick random shift amounts whose sum is zero
+            List<Integer> amounts = new ArrayList<Integer>();
+            int count = 1 + rnd.nextInt(20);
+            int total = 0;
+            for (int i = 0; i < count; i++) {
+                int amount = rnd.nextInt(bitLen);
+                amounts.add(amount);
+                total += amount;
+            }
+            while (total > 0) {
+                int amount = Math.min(rnd.nextInt(bitLen), total);
+                amounts.add(-amount);
+                total -= amount;
+            }
+            Collections.shuffle(amounts);
+
+            long[] a = createRandomModFn(n);
+            long[] aOrig = a.clone();
+            Object aMutable = mutableModFnCtor.newInstance(a);
+            for (int amount: amounts) {
+                Object bMutable = mutableModFnCtor.newInstance(new long[a.length]);
+                if (amount > 0)
+                    shiftLeftMethod.invoke(aMutable, amount, bMutable);
+                else
+                    shiftRightMethod.invoke(aMutable, -amount, bMutable);
+                aMutable = bMutable;
+            }
+            reduceMethod.invoke(aMutable);
+            a = (long[])digitsField.get(aMutable);
+
+            if (!Arrays.equals(a, aOrig))
+                failCount++;
+        }
+
+        // test MutableModFn.reduce()
+        for (int k = 0; k<100; k++) {
+            int n = 6 + rnd.nextInt(15);
+            long[] a = createRandomModFn(n);
+            a[0] = rnd.nextLong();   // test all long values, not just 0 and 1
+            long[] aOrig = a.clone();
+            BigInteger Fn = fermat(n);
+
+            int[] aOrigInt = toIntArray(aOrig);
+            BigInteger expected = bigintCtor.newInstance(1, aOrigInt).mod(Fn);
+
+            Object aMutable = mutableModFnCtor.newInstance(a);
+            reduceMethod.invoke(aMutable);
+            a = (long[])digitsField.get(aMutable);
+            int[] aInt = toIntArray(a);
+            BigInteger actual = bigintCtor.newInstance(1, aInt);
+
+            if (!actual.equals(expected))
+                failCount++;
+            if (actual.compareTo(Fn) >= 0)
+                failCount++;
+        }
+
+        // test MutableModFn.reduceWide()
+        Method reduceWideMethod = mutableModFnClass.getDeclaredMethod("reduceWide", long[].class);
+        reduceWideMethod.setAccessible(true);
+        for (int k = 0; k<100; k++) {
+            int n = 6 + rnd.nextInt(15);
+            int len = 1 << (n + 1 - 6);
+            long[] a = createRandomArrayLong(len);
+            long[] aOrig = a.clone();
+            BigInteger Fn = fermat(n);
+
+            int[] aOrigInt = toIntArray(aOrig);
+            BigInteger expected = bigintCtor.newInstance(1, aOrigInt).mod(Fn);
+
+            reduceWideMethod.invoke(null, a);
+            int[] aInt = (int[])toIntArrayOddMethod.invoke(null, a);
+            BigInteger actual = bigintCtor.newInstance(1, aInt);
+
+            if (!actual.equals(expected))
+                failCount++;
+            if (actual.compareTo(Fn) >= 0)
+                failCount++;
+        }
+
+        // test MutableModFn.toIntArray() and MutableModFn.toLongArray()
+        Method toLongArrayEvenMethod = mutableModFnClass.getDeclaredMethod("toLongArrayEven", int[].class);
+        toLongArrayEvenMethod.setAccessible(true);
+        for (int i=0; i<1000; i++) {
+            int n = 2 + rnd.nextInt(1000);
+            int[] a = createRandomArray(n);
+            long[] b = n%2==0 ? (long[])toLongArrayEvenMethod.invoke(null, a) : toLongArrayOdd(a);
+            int[] c = n%2==0 ? toIntArray(b) : (int[])toIntArrayOddMethod.invoke(null, b);
+            if (!Arrays.equals(a, c))
+                failCount++;
+        }
+
+        // test addModPow2
+        Method addModPow2Method = BigInteger.class.getDeclaredMethod("addModPow2", int[].class, int[].class, int.class);
+        addModPow2Method.setAccessible(true);
+        for (int k = 0; k<100; k++) {
+            int n = 6 + rnd.nextInt(15);
+            int len = 1 << (n + 1 - 5);
+            int[] aArr = createRandomArray(len);
+            aArr[0] &= 0x7FFFFFFF; // make sure the most significant int doesn't overflow
+            BigInteger a = bigintCtor.newInstance(1, aArr);
+            int[] bArr = createRandomArray(len);
+            bArr[0] &= 0x7FFFFFFF; // make sure the most significant int doesn't overflow
+            BigInteger b = bigintCtor.newInstance(1, bArr);
+            int numBits = rnd.nextInt(n);
+            BigInteger pow2 = BigInteger.valueOf(1<<numBits);
+            BigInteger expected = a.add(b).mod(pow2);
+            addModPow2Method.invoke(null, aArr, bArr, numBits);
+            BigInteger actual = bigintCtor.newInstance(1, aArr);
+            if (!actual.equals(expected))
+                failCount++;
+        }
+
+        // test subModPow2
+        Method subModPow2Method = BigInteger.class.getDeclaredMethod("subModPow2", int[].class, int[].class, int.class);
+        subModPow2Method.setAccessible(true);
+        for (int k = 0; k<100; k++) {
+            int n = 6 + rnd.nextInt(15);
+            int len = 1 << (n + 1 - 5);
+            int[] aArr = createRandomArray(len);
+            aArr[0] &= 0x7FFFFFFF; // make sure the most significant int doesn't overflow
+            BigInteger a = bigintCtor.newInstance(1, aArr);
+            int[] bArr = createRandomArray(len);
+            bArr[0] &= 0x7FFFFFFF; // make sure the most significant int doesn't overflow
+            BigInteger b = bigintCtor.newInstance(1, bArr);
+            int numBits = rnd.nextInt(n);
+            BigInteger pow2 = BigInteger.valueOf(1<<numBits);
+            BigInteger expected = a.subtract(b).mod(pow2);
+            subModPow2Method.invoke(null, aArr, bArr, numBits);
+            BigInteger actual = bigintCtor.newInstance(1, aArr);
+            if (!actual.equals(expected))
+                failCount++;
+        }
+
+        // test splitBits
+        Method splitBitsMethod = BigInteger.class.getDeclaredMethod("splitBits", int[].class, int.class);
+        splitBitsMethod.setAccessible(true);
+        for (int k = 0; k<100; k++) {
+            int n = 1 + rnd.nextInt(1000);
+            int[] aArr = createRandomArray(n);
+            BigInteger actual = bigintCtor.newInstance(1, aArr);
+            int pieceSize = 1 + smallRandom(n-1, rnd);
+            int[][] pieces = (int[][])splitBitsMethod.invoke(null, aArr, pieceSize);
+            BigInteger expected = ZERO;
+            for (int i=pieces.length-1; i>=0; i--) {
+                int[] piece = pieces[i];
+                BigInteger pieceBigInt = bigintCtor.newInstance(1, piece);
+                expected = expected.shiftLeft(pieceSize).add(pieceBigInt);
+            }
+            if (!actual.equals(expected))
+                failCount++;
+        }
+
+        // test addShifted
+        Method addShiftedMethod = BigInteger.class.getDeclaredMethod("addShifted", int[].class, int[].class, int.class);
+        addShiftedMethod.setAccessible(true);
+        for (int k = 0; k<100; k++) {
+            int[] aArr = createRandomArray(1 + rnd.nextInt(1000));
+            BigInteger a = bigintCtor.newInstance(1, aArr);
+            int offset = rnd.nextInt(aArr.length);
+            int[] bArr = createRandomArray(1 + rnd.nextInt(1000));
+            BigInteger b = bigintCtor.newInstance(1, bArr);
+            addShiftedMethod.invoke(null, aArr, bArr, offset);
+            BigInteger actual = bigintCtor.newInstance(1, aArr);
+            BigInteger mask = ONE.shiftLeft(aArr.length*32).subtract(ONE);
+            BigInteger expected = a.add(b.shiftLeft(offset*32)).and(mask);
+            if (!actual.equals(expected))
+                failCount++;
+        }
+
+        // test appendBits
+        Method appendBitsMethod = BigInteger.class.getDeclaredMethod("appendBits", int[].class, int.class, int[].class, int.class, int.class);
+        appendBitsMethod.setAccessible(true);
+        for (int k = 0; k<100; k++) {
+            int[] src = createRandomArray(1 + rnd.nextInt(1000));
+            BigInteger srcBigInt = bigintCtor.newInstance(1, src);
+            int[] dest = new int[src.length];
+            int valBits = 1 + smallRandom(src.length*32-1, rnd);
+            int padBits = 1 + smallRandom(src.length*32-1, rnd);
+            BigInteger mask = ONE.shiftLeft(valBits).subtract(ONE);
+            int srcIndex = 0;
+            int destBits = 0;
+            BigInteger expected = ZERO;
+            while (srcIndex+(valBits+31)/32<src.length && destBits+valBits+padBits<dest.length*32) {
+                expected = expected.add(srcBigInt.shiftRight(srcIndex*32).and(mask).shiftLeft(destBits));
+                appendBitsMethod.invoke(null, dest, destBits, src, srcIndex, valBits);
+                srcIndex += (valBits+31) / 32;
+                destBits += valBits + padBits;
+            }
+            if (destBits > 0)
+                dest = Arrays.copyOfRange(dest, dest.length-(destBits+31)/32, dest.length);
+            BigInteger actual = bigintCtor.newInstance(1, dest);
+            if (!actual.equals(expected))
+                failCount++;
+        }
+
+        report("Schoenhage-Strassen", failCount);
+    }
+
+    // like Random.nextInt(int) but favors small numbers
+    private static int smallRandom(int n, Random rnd) {
+        return (int)(n * Math.pow(rnd.nextDouble(), 5));
+    }
+
+    private static int[] createRandomArray(int length) {
+        int[] a = new int[length];
+        for (int i=0; i<a.length; i++)
+            a[i] = rnd.nextInt();
+        return a;
+    }
+
+    private static long[] createRandomArrayLong(int length) {
+        long[] a = new long[length];
+        for (int i=0; i<a.length; i++)
+            a[i] = rnd.nextLong();
+        return a;
+    }
+
+    /**
+     * Returns a random number modulo 2^2^n+1. The results are biased
+     * towards the special case 2^2^n.
+     * @param n must be 6 or greater
+     * @return an array of length ceil((2^n+1) / 64.0)
+     */
+    private static long[] createRandomModFn(int n) {
+        int length = (1<<(n-6)) + 1;
+        long[] a = new long[length];
+        if (rnd.nextInt(5) == 0)
+            a[0] = 1;   // return 2^2^n
+        else
+            // leave a[0] zero, make everything else random
+            for (int i=1; i<a.length; i++)
+                a[i] = rnd.nextLong();
+        return a;
+    }
+
+    private static long[][] createRandomDftArray(int m, int n) {
+        int numElements = m%2==0 ? 1<<n : 1<<(n+1);
+        numElements /= 2;
+        long[][] a = new long[numElements][];
+        for (int i=0; i<a.length; i++)
+            a[i] = createRandomModFn(n);
+        return a;
+    }
+
+    private static int[] toIntArray(long[] digits) {
+        int[] intDigits = new int[digits.length*2];
+        for (int i=0; i<digits.length; i++) {
+            intDigits[2*i] = (int)(digits[i] >>> 32);
+            intDigits[2*i+1] = (int)(digits[i] & -1);
+        }
+        return intDigits;
+    }
+
+    /** digits.length must be an odd number */
+    public static long[] toLongArrayOdd(int[] digits) {
+        long[] longDigits = new long[digits.length/2+1];
+        longDigits[0] = digits[0];
+        for (int i=1; i<longDigits.length; i++)
+            longDigits[i] = (((long)digits[2*i-1])<<32) | (digits[2*i]&0xFFFFFFFFL);
+        return longDigits;
+    }
+
+    /** Returns the n-th Fermat number */
+    private static BigInteger fermat(int n) throws Exception {
+        Constructor<BigInteger> bigintCtor = BigInteger.class.getDeclaredConstructor(int.class, int[].class);
+        bigintCtor.setAccessible(true);
+        int length = (1<<(n-5)) + 1;
+        int[] FnArr = new int[length];
+        FnArr[0] = 1;
+        FnArr[FnArr.length-1] = 1;
+        return bigintCtor.newInstance(1, FnArr);
+    }
+
+    private static void inverse() throws Exception {
+        int failCount = 0;
+
+        Method inverseMethod = BigInteger.class.getDeclaredMethod("inverse", int.class, int.class);
+        inverseMethod.setAccessible(true);
+        for (int i=0; i<REDUCED_SIZE; i++) {
+            BigInteger a;
+            do {
+                a = fetchNumber(ORDER_SS_BARRETT);
+            } while (a.compareTo(ZERO) <= 0);
+            int n = rnd.nextInt(a.bitLength());
+            BigInteger expected = BigInteger.ONE.shiftLeft(a.bitLength()+n).divide(a);
+            BigInteger actual = (BigInteger)inverseMethod.invoke(a, n, 1+rnd.nextInt(4));
+            if (actual.subtract(expected).abs().compareTo(ONE) > 1)
+                failCount++;
+        }
+        report("Inverse", failCount);
+    }
+
@@ -498 +1045,2 @@
-        for (int i=0; i<SIZE; i++) {
+        int iterations = order<ORDER_SS_BARRETT ? SIZE : REDUCED_SIZE;
+        for (int i=0; i<iterations; i++) {
@@ -594 +1142,2 @@
-        for (int i=0; i<SIZE; i++) {
+        int iterations = order<ORDER_SS_BARRETT ? SIZE : REDUCED_SIZE;
+        for (int i=0; i<iterations; i++) {
@@ -952,0 +1502 @@
+        int order5 = ORDER_SS_BARRETT;
@@ -961,0 +1512,2 @@
+        if (args.length >4)
+            order5 = (int)((Integer.parseInt(args[4]))* 3.333);
@@ -965,0 +1518,4 @@
+        schoenhageStrassen(order5);
+
+        inverse();
+
@@ -968,0 +1525 @@
+        arithmetic(order5);   // SS/Barrett range
@@ -972,0 +1530 @@
+        divideAndRemainder(order5);   // SS/Barrett range
@@ -980,0 +1539 @@
+        square(order5);   // SS/Barrett range
